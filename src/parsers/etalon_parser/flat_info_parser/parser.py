import re
import json
from tqdm import tqdm
import logging
import os
from playwright.sync_api import sync_playwright, Page, Browser
import time
import json
import os
import logging
import sys
import random
from datetime import datetime
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
class ColoredFormatter(logging.Formatter):
    COLORS = {
        'INFO': '\033[92m',  # –∑–µ–ª–µ–Ω—ã–π
        'WARNING': '\033[93m',  # –∂–µ–ª—Ç—ã–π
        'ERROR': '\033[91m',  # –∫—Ä–∞—Å–Ω—ã–π
        'DEBUG': '\033[94m',  # —Å–∏–Ω–∏–π
        'RESET': '\033[0m'  # —Å–±—Ä–æ—Å —Ü–≤–µ—Ç–∞
    }
    
    def format(self, record):
        log_message = super().format(record)
        return f"{self.COLORS.get(record.levelname, self.COLORS['RESET'])}{log_message}{self.COLORS['RESET']}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("StealthyParser")
logger.setLevel(logging.INFO)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler("extraction.log")
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–∞–º–∏
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(ColoredFormatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(console_handler)

def print_progress_bar(iteration, total, prefix='', suffix='', length=50, fill='‚ñà'):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –∫–æ–Ω—Å–æ–ª–∏"""
    percent = f"{100 * (iteration / float(total)):.1f}"
    filled_length = int(length * iteration // total)
    bar = fill * filled_length + '-' * (length - filled_length)
    sys.stdout.write(f'\r{prefix} |{bar}| {percent}% {suffix}')
    sys.stdout.flush()
    if iteration == total: 
        sys.stdout.write('\n')

def simulate_human_behavior(page: Page):
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("üß† –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è...")
    
    # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
    for _ in range(random.randint(3, 7)):
        x = random.randint(100, 1500)
        y = random.randint(100, 700)
        page.mouse.move(x, y, steps=random.randint(5, 10))  # –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
        random_delay(0.1, 0.5)
    
    # –°–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
    scroll_amount = random.randint(300, 700)
    logger.debug(f"–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –Ω–∞ {scroll_amount}px")
    page.mouse.wheel(0, scroll_amount)
    random_delay(0.1, 0.5)
    
    # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 40% –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤–≤–µ—Ä—Ö, –∫–∞–∫ –±—É–¥—Ç–æ —á—Ç–æ-—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ
    if random.random() < 0.4:
        back_scroll = random.randint(100, 300)
        logger.debug(f"–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö –Ω–∞ {back_scroll}px")
        page.mouse.wheel(0, -back_scroll)
        random_delay(0.1, 0.5)
    
    # –ò–Ω–æ–≥–¥–∞ –≤—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç (—Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 20%)
    if random.random() < 0.2:
        text_elements = page.query_selector_all("p, h1, h2, h3, span, a")
        if text_elements:
            element = random.choice(text_elements)
            try:
                element.click(click_count=random.choice([1, 3]))  # –û–¥–∏–Ω–æ—á–Ω—ã–π –∏–ª–∏ —Ç—Ä–æ–π–Ω–æ–π –∫–ª–∏–∫
                random_delay(0.1, 0.5)
                page.keyboard.press("Escape")  # –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ
    
    # –ò–Ω–æ–≥–¥–∞ "–¥—É–º–∞–µ–º" –¥–æ–ª—å—à–µ (—Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30%)
    if random.random() < 0.3:
        random_delay(0.1, 0.5)
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –∏–∑—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    page.mouse.wheel(0, random.randint(100, 400))
    random_delay(0.1, 0.5)

def random_delay(min_seconds=1, max_seconds=5):
    """–°–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    delay = random.uniform(min_seconds, max_seconds)
    time.sleep(delay)
    return delay

def load_cookies(context):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç cookies –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    cookies_file = 'etalon_cookies.json'
    if os.path.exists(cookies_file):
        try:
            with open(cookies_file, 'r') as f:
                cookies = json.load(f)
                context.add_cookies(cookies)
                logger.info(f"üç™ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cookies)} cookies –∏–∑ —Ñ–∞–π–ª–∞")
                return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ cookies: {e}")
    return False

def save_cookies(context):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç cookies –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    cookies = context.cookies()
    with open('etalon_cookies.json', 'w', encoding='utf-8') as f:
        json.dump(cookies, f, ensure_ascii=False)
    logger.info(f"üç™ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(cookies)} cookies –≤ —Ñ–∞–π–ª")

def check_and_solve_captcha(page):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ CAPTCHA –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–µ—à–∏—Ç—å –µ—ë"""
    captcha_selectors = [
        'iframe[src*="recaptcha"]',
        'iframe[src*="captcha"]',
        'div.g-recaptcha',
        'div[class*="captcha"]',
        'img[src*="captcha"]'
    ]
    
    for selector in captcha_selectors:
        if page.is_visible(selector):
            logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ CAPTCHA: {selector}")
            page.screenshot(path="captcha_detected.png")
            input("CAPTCHA –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! –†–µ—à–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return True
    
    return False

def extract_property_links(page: Page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    logger.info("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...")
    
    # –°–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã, –≤–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    selectors = [
        'a[href*="/msk/choose/"]',  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ HTML
        'div.bg-white.relative > a',  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        '.bg-white a'  # –ë–æ–ª–µ–µ –æ–±—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    ]
    
    all_links = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    for selector in selectors:
        elements = page.query_selector_all(selector)
        logger.info(f"–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –Ω–∞—à–µ–ª {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        for element in elements:
            href = element.get_attribute('href')
            if href:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
                full_url = 'https://etalongroup.ru' + href if href.startswith('/') else href
                all_links.add(full_url)
    
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_links)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã")
    
    return list(all_links)


def wait_page(results_page):
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏:
    try:
        # –ñ–¥–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã (DOMContentLoaded –∏ load events)
        results_page.wait_for_load_state("load", timeout=30000)
        logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –î–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JavaScript-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
        random_delay(0.5, 2)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        # –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        try:
            results_page.wait_for_selector('a[href*="/msk/object/"]', timeout=10000)
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        
        logger.info(f"‚úÖ –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {results_page.url}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try:
            results_page.screenshot(path="page_load_warning.png")
        except:
            pass
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π")


def extract_apartment_details(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    
    apartment_data = {}
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
    title = page.query_selector("h4.th-h3.text-charcoal")
    if title:
        title_text = title.inner_text()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ –ø–ª–æ—â–∞–¥—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        apartment_data["title"] = title_text
        room_match = re.search(r'(\d+)-–∫–æ–º–Ω', title_text)
        apartment_data["rooms"] = room_match.group(1) if room_match else None
        
        number_match = re.search(r'‚Ññ(\d+)', title_text)
        apartment_data["number"] = number_match.group(1) if number_match else None
        
        area_match = re.search(r'(\d+(?:,\d+)?)\s*–º¬≤', title_text)
        apartment_data["area"] = area_match.group(1).replace(',', '.') if area_match else None
    
    # –¶–µ–Ω–∞
    price_elem = page.query_selector("p.th-h3.text-scarlet")
    if price_elem:
        price_text = price_elem.inner_text()
        clean_price = re.sub(r'[^\d]', '', price_text)
        apartment_data["price"] = clean_price
    
    # –¶–µ–Ω–∞ –∑–∞ –º¬≤
    price_per_meter_elem = page.query_selector("div.th-b1-regular.text-cruella")
    if price_per_meter_elem:
        price_per_meter_text = price_per_meter_elem.inner_text()
        clean_price_per_meter = re.sub(r'[^\d]', '', price_per_meter_text)
        apartment_data["price_per_meter"] = clean_price_per_meter
    
    # –°—Ä–æ–∫ —Å–¥–∞—á–∏
    completion_date_elem = page.query_selector("div.u-badge__content span.th-b1-regular")
    if completion_date_elem:
        apartment_data["completion_date"] = completion_date_elem.inner_text().strip()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ, –º–µ—Ç—Ä–æ –∏ –∞–¥—Ä–µ—Å–µ
    project_details = {}
    info_rows = page.query_selector_all("section.flex.flex-col.gap-2.pb-4 > div")
    
    for row in info_rows:
        # –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
        key_elem = row.query_selector("p:first-child")
        value_elem = row.query_selector("p:last-child")
        
        if key_elem and value_elem:
            key = key_elem.inner_text().strip()
            
            # –î–ª—è –ø–æ–ª—è "–ü—Ä–æ–µ–∫—Ç" –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ span
            if key == "–ü—Ä–æ–µ–∫—Ç":
                project_span = row.query_selector("span.th-b1-bold")
                value = project_span.inner_text().strip() if project_span else value_elem.inner_text().strip()
            else:
                value = value_elem.inner_text().strip()
            
            project_details[key] = value
    
    apartment_data["details"] = project_details
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–º–Ω–∞—Ç (–Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∫–æ–º–Ω–∞—Ç")
    show_room_sizes_button = page.query_selector("div.flex.flex-row.items-center.gap-1.th-b1-bold.text-charcoal.cursor-pointer")
    if show_room_sizes_button:
        show_room_sizes_button.click()
        # –ñ–¥–µ–º, –ø–æ–∫–∞ —Ä–∞—Å–∫—Ä–æ–µ—Ç—Å—è —Å–µ–∫—Ü–∏—è —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
        page.wait_for_timeout(500)
        
        room_sizes = {}
        size_rows = page.query_selector_all("section.overflow-hidden div.flex.flex-row")
        
        for row in size_rows:
            room_name_elem = row.query_selector("p:first-child")
            room_size_elem = row.query_selector("p.flex-grow.text-right")
            
            if room_name_elem and room_size_elem:
                room_name = room_name_elem.inner_text().strip()
                room_size_text = room_size_elem.inner_text().strip()
                size_match = re.search(r'(\d+(?:[.,]\d+)?)\s*–º¬≤', room_size_text)
                room_size = size_match.group(1).replace(',', '.') if size_match else room_size_text
                room_sizes[room_name] = room_size
        
        apartment_data["room_sizes"] = room_sizes
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
    presentation_link = page.query_selector('a[href*="pdfflat"]')
    if presentation_link:
        apartment_data["presentation_url"] = presentation_link.get_attribute("href")
    
    return apartment_data

def parse_features_component(page):
    """
    –ü–∞—Ä—Å–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏" —Å–æ –≤—Å–µ–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    """
    features_data = {}
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        features_title = page.query_selector("p.th-h2:has-text('–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏')")
        
        if not features_title:
            print("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            return features_data
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        tabs = page.query_selector_all("button.v-tab")
        
        if not tabs:
            print("–í–∫–ª–∞–¥–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return features_data
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(tabs)} –≤–∫–ª–∞–¥–æ–∫ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏'")
        
        # –û–±—Ö–æ–¥–∏–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        for i, tab in enumerate(tabs):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
                tab_title_element = tab.query_selector("span.u-tab__text")
                if tab_title_element:
                    tab_title = tab_title_element.inner_text().strip()
                else:
                    tab_title = f"–í–∫–ª–∞–¥–∫–∞ {i+1}"
                
                print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É: {tab_title}")
                
                # –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ñ–¥–µ–º, –ø–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
                try:
                    # –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
                    page.wait_for_selector("div.v-window-item--active div.bg-light-gray", timeout=5000)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
                    page.wait_for_selector("div.v-window-item--active p.th-h3", timeout=5000)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
                    page.wait_for_selector("div.v-window-item--active section", timeout=5000)
                    
                    # –î–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
                    page.wait_for_timeout(500)
                except Exception as wait_error:
                    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏: {str(wait_error)}")
                

                # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                tab.click()
                
                # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                page.wait_for_timeout(1000)
                
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
                tab_data = {}
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:
                # title (p.th-h3) –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–¥–µ—Ç section —Å description
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, —É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                result = page.evaluate("""(tabName) => {
                    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
                    const featuresSection = Array.from(document.querySelectorAll('p.th-h2'))
                        .find(el => el.textContent.trim() === '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏')
                        ?.closest('div.max-w-\\\\[1210px\\\\]');
                    
                    if (!featuresSection) return { title: '', description: '', images: [] };
                    
                    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –í–ù–£–¢–†–ò —Å–µ–∫—Ü–∏–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
                    const activeTab = featuresSection.querySelector('.v-window-item--active');
                    if (!activeTab) return { title: '', description: '', images: [] };
                    
                    // –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (div —Å –∫–ª–∞—Å—Å–æ–º bg-light-gray)
                    const infoBlock = activeTab.querySelector('div.bg-light-gray');
                    if (!infoBlock) return { title: '', description: '', images: [] };
                    
                    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (p.th-h3)
                    const titleElem = infoBlock.querySelector('p.th-h3');
                    const title = titleElem ? titleElem.textContent.trim() : tabName;
                    
                    // –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–∞—è –∏–¥–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    const sectionElem = infoBlock.querySelector('section');
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –≤–Ω—É—Ç—Ä–∏ section
                    let description = '';
                    if (sectionElem) {
                        // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤, –∏—Å–∫–ª—é—á–∞—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                        const paragraphs = Array.from(sectionElem.querySelectorAll('p'))
                            .filter(p => !p.classList.contains('flex') || !p.querySelector('p'));
                        
                        const textArray = [];
                        for (const p of paragraphs) {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º
                            if (p.childElementCount === 0 || 
                                (p.childElementCount > 0 && !p.querySelector('p'))) {
                                const text = p.textContent.trim();
                                if (text) textArray.push(text);
                            }
                        }
                        
                        description = textArray.join('\\n\\n');
                    }
                    
                    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
                    const images = activeTab.querySelectorAll('img.v-img__img--cover');
                    const imageUrls = Array.from(images)
                        .map(img => img.getAttribute('src'))
                        .filter(src => src);
                    
                    return {
                        title: title,
                        description: description,
                        images: imageUrls
                    };
                }""", tab_title)
                
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
                tab_data = result if result else {"title": tab_title, "description": "", "images": []}
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ –≤ –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å
                features_data[tab_title] = tab_data
                
                print(f"–î–ª—è –≤–∫–ª–∞–¥–∫–∏ '{tab_title}' –∏–∑–≤–ª–µ—á–µ–Ω–æ:")
                print(f"  - –ó–∞–≥–æ–ª–æ–≤–æ–∫: {tab_data.get('title', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
                desc = tab_data.get('description', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')
                print(f"  - –û–ø–∏—Å–∞–Ω–∏–µ: {desc[:50]}..." if len(desc) > 50 else f"  - –û–ø–∏—Å–∞–Ω–∏–µ: {desc}")
                print(f"  - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(tab_data.get('images', []))}")
            
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∫–ª–∞–¥–∫–∏ {i+1}: {str(e)}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏': {str(e)}")
    
    return features_data

def parse_apartment_page(page: Page, url):
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–≤–∞—Ä—Ç–∏—Ä—ã
        page.goto(url, timeout=60000)

        wait_page(page)

        # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        random_delay(0.5, 2)
        simulate_human_behavior(page)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CAPTCHA
        if check_and_solve_captcha(page):
            logger.info("CAPTCHA —Ä–µ—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        apartment_data = extract_apartment_details(page)

        # –î–æ–±–∞–≤–ª—è–µ–º URL –≤ –¥–∞–Ω–Ω—ã–µ
        apartment_data["url"] = url

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏" –∏ –ø–∞—Ä—Å–∏–º –µ–≥–æ
        features_section = page.query_selector("p.th-h2.text-charcoal:has-text('–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏')")
        if features_section:
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"
            features_data = parse_features_component(page)
            if features_data:
                apartment_data["features"] = features_data

        return apartment_data

def browse() -> Browser:
    logger.info("=" * 60)
    logger.info(f"ü•∑ –ù–ê–ß–ê–õ–û –°–ö–†–´–¢–û–ì–û –ü–ê–†–°–ò–ù–ì–ê: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ User-Agent –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
    user_agents = [
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.2 Safari/605.1.15",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:122.0) Gecko/20100101 Firefox/122.0"
    ]
    
    # –°–ª—É—á–∞–π–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
    viewports = [
        {"width": 1920, "height": 1080},
        {"width": 1440, "height": 900},
        {"width": 1366, "height": 768}
    ]
    
    # –Ø–≤–Ω—ã–π –ø—É—Ç—å –∫ Yandex Browser –Ω–∞ macOS
    yandex_path = "/Applications/Yandex.app/Contents/MacOS/Yandex"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
    if not os.path.exists(yandex_path):
        logger.warning(f"Yandex Browser –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {yandex_path}")
        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏...")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –∫ Yandex Browser
        alternative_paths = [
            "/Applications/Yandex Browser.app/Contents/MacOS/Yandex Browser",
            os.path.expanduser("~/Applications/Yandex.app/Contents/MacOS/Yandex"),
            os.path.expanduser("~/Applications/Yandex Browser.app/Contents/MacOS/Yandex Browser")
        ]
        
        for path in alternative_paths:
            if os.path.exists(path):
                yandex_path = path
                logger.info(f"–ù–∞–π–¥–µ–Ω Yandex Browser: {yandex_path}")
                break
        else:
            logger.error("Yandex Browser –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–µ—Å—Ç")
            custom_path = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Yandex Browser: ")
            if os.path.exists(custom_path):
                yandex_path = custom_path
            else:
                logger.error(f"–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {custom_path}")
                return
    
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º Yandex Browser: {yandex_path}")

    with sync_playwright() as p:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π User-Agent
        selected_user_agent = random.choice(user_agents)
        selected_viewport = random.choice(viewports)
        
        logger.info(f"üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ–º User-Agent: {selected_user_agent}")
        logger.info(f"üìê –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {selected_viewport['width']}x{selected_viewport['height']}")
        
        browser = p.chromium.launch(
            headless=True,
            executable_path=yandex_path,
            args=[
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-blink-features=AutomationControlled",  # –°–∫—Ä—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
                "--disable-extensions"
            ]
        ) 
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        context = browser.new_context(
            user_agent=selected_user_agent,
            viewport=selected_viewport,
            locale=random.choice(["ru-RU", "en-US"]),
            timezone_id="Europe/Moscow"
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies –µ—Å–ª–∏ –µ—Å—Ç—å
        has_cookies = load_cookies(context)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page = context.new_page()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        page.add_init_script("""
            // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ navigator –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            Object.defineProperty(navigator, 'webdriver', {
                get: () => false,
            });
            
            // –°–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            if (window.navigator.plugins) {
                Object.defineProperty(navigator, 'plugins', {
                    get: () => [1, 2, 3, 4, 5],
                });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ —è–∑—ã–∫–∏
            Object.defineProperty(navigator, 'languages', {
                get: () => ['ru-RU', 'ru', 'en-US', 'en'],
            });
            
            // –°–∫—Ä—ã–≤–∞–µ–º Chrome
            window.chrome = {
                runtime: {},
            };
        """)

         # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å–∞–π—Ç–∞
        start_delay = random_delay(0.5, 2)
        logger.debug(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å–∞–π—Ç–∞: {start_delay:.2f}—Å")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ URL
        urls = json.load(open("link_extractor/extracted_links.json", "r", encoding="utf-8"))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if os.path.exists("result.csv"):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            df = pd.read_csv("result.csv")
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —Å {len(df)} –∑–∞–ø–∏—Å—è–º–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö URL
            processed_urls = df['url'].tolist()
            
            # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ URL
            urls_to_process = [url for url in urls if url not in processed_urls]
            print(f"–û—Å—Ç–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {len(urls_to_process)} –∏–∑ {len(urls)} URL")
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ URL
            df = pd.DataFrame()
            urls_to_process = urls
            print(f"–ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—Å–µ {len(urls)} URL")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
        if not urls_to_process:
            print("–í—Å–µ URL —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            return df


        for url in tqdm(urls_to_process, desc="–ü–∞—Ä—Å–∏–Ω–≥ –∫–≤–∞—Ä—Ç–∏—Ä"):
            try:
                data = parse_apartment_page(page, url)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
                new_df = pd.DataFrame([data])

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                df = pd.concat([df, new_df], ignore_index=True)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π DataFrame –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
                df.to_csv("result.csv", index=False, encoding="utf-8-sig")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL {url}: {str(e)}")

        save_cookies(context)

        browser.close()


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    browse()