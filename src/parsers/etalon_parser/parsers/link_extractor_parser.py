import logging
import os
import json
from datetime import datetime
from playwright.sync_api import Page

from parsers.base_parser import BaseParser
from utils.browser_utils import wait_page, check_and_solve_captcha
from utils.human_behavior import simulate_human_behavior, random_delay
from extractors.property_links_extractor import extract_property_links
from utils.ui_utils import print_progress_bar

logger = logging.getLogger("StealthyParser")

class LinkExtractorParser(BaseParser):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å —Å–∞–π—Ç–∞ Etalon Group"""
    
    def __init__(self, max_workers=4, output_dir="link_extractor"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
        
        Args:
            max_workers: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        super().__init__(max_workers)
        self.output_dir = output_dir
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {output_dir}")
    
    def parse_page(self, page: Page, url: str):
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
        
        Args:
            page: –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Playwright
            url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–∫–∞—Ö
        """
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä
        page.goto(url, timeout=60000)
        wait_page(page)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        random_delay(0.5, 1.5)
        simulate_human_behavior(page)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CAPTCHA
        if check_and_solve_captcha(page):
            logger.info("CAPTCHA —Ä–µ—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        initial_html_path = os.path.join(self.output_dir, "initial_page.html")
        with open(initial_html_path, "w", encoding="utf-8") as f:
            f.write(page.content())
        
        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        self._load_all_properties(page)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π HTML
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ –≤—Å–µ–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏")
        html_content = page.content()
        final_html_path = os.path.join(self.output_dir, "final_page.html")
        with open(final_html_path, "w", encoding="utf-8") as f:
            f.write(html_content)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        links = extract_property_links(page)
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(links)} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
        json_path = os.path.join(self.output_dir, "extracted_links.json")
        with open(json_path, "w", encoding="utf-8") as f:
            json.dump(links, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üíæ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(links)} –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª {json_path}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            "url": url,
            "extracted_links": len(links),
            "links": links,
            "timestamp": datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
    
    def _load_all_properties(self, page: Page):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –Ω–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
        
        Args:
            page: –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Playwright
        """
        logger.info("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ'...")
        
        counter = 0
        max_clicks = 1000
        
        # –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ - –≤—ã–¥–µ–ª–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        self._highlight_all_buttons(page)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
        while counter < max_clicks:
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
            button_selector = self._scroll_and_find_button(page)
            
            if button_selector:
                logger.info(f"üëÜ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ' ({counter + 1}/{max_clicks}) —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {button_selector}")
                
                try:
                    
                    # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É
                    if button_selector.startswith("xpath="):
                        # –ï—Å–ª–∏ XPath, –∏—Å–ø–æ–ª—å–∑—É–µ–º evaluate –¥–ª—è –∫–ª–∏–∫–∞
                        page.evaluate(f"""
                            () => {{
                                const button = document.evaluate(
                                    "{button_selector.replace('xpath=', '')}", 
                                    document, 
                                    null, 
                                    XPathResult.FIRST_ORDERED_NODE_TYPE
                                ).singleNodeValue;
                                if (button) button.click();
                            }}
                        """)
                    else:
                        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∫–ª–∏–∫–∞
                        page.click(button_selector)
                    
                    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    page.wait_for_timeout(1000)
                    
                    # # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
                    # screenshot_path = os.path.join(self.output_dir, f"after_click_{counter+1}.png")
                    # page.screenshot(path=screenshot_path)
                    
                    counter += 1
                    print_progress_bar(counter, max_clicks, prefix='–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤:', suffix='–ó–∞–≥—Ä—É–∂–µ–Ω–æ', length=40)

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
                    links = extract_property_links(page)
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(links)} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
                    json_path = os.path.join(self.output_dir, "extracted_links.json")
                    with open(json_path, "w", encoding="utf-8") as f:
                        json.dump(links, f, ensure_ascii=False, indent=2)
                    
                    logger.info(f"üíæ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(links)} –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª {json_path}")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏: {e}")
            else:
                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                screenshot_path = os.path.join(self.output_dir, "no_more_button.png")
                page.screenshot(path=screenshot_path)
                break
    
    def _find_show_more_button(self, page):
        """
        –ò—â–µ—Ç –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        
        Args:
            page: –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Playwright
            
        Returns:
            str: –°–µ–ª–µ–∫—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        # 1. –ò—â–µ–º –ø–æ —Ç–æ—á–Ω–æ–º—É –∫–ª–∞—Å—Å—É (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ HTML)
        exact_selector = 'button.u-btn.u-btn--variant-flat.u-btn--density-default.u-btn--width-content.th-b1-medium:has-text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ")'
        if page.is_visible(exact_selector):
            return exact_selector
        
        # 2. –ò—â–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ç–µ–∫—Å—Ç–∞
        text_selector = 'button:has-text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ")'
        if page.is_visible(text_selector):
            return text_selector
        
        # 3. –ò—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º –∫–ª–∞—Å—Å–∞–º
        class_selector = 'button.u-btn--width-content:has-text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ")'
        if page.is_visible(class_selector):
            return class_selector
        
        # 4. –ò—â–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É span
        span_selector = 'button .u-btn__content:has-text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ")'
        if page.query_selector(span_selector):
            button = page.query_selector(span_selector).evaluate('node => node.closest("button")')
            if button:
                return span_selector
        
        # 5. –ò—â–µ–º –ø–æ XPath
        xpath_selector = "//button[.//span[contains(text(), '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ')]]"
        if page.is_visible(f"xpath={xpath_selector}"):
            return f"xpath={xpath_selector}"
        
        # 6. –ò—â–µ–º –±–æ–ª–µ–µ –æ–±—â–∏–º —Å–ø–æ—Å–æ–±–æ–º
        general_xpath = "//button[contains(., '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ')]"
        if page.is_visible(f"xpath={general_xpath}"):
            return f"xpath={general_xpath}"
        
        return None
    
    def _scroll_and_find_button(self, page):
        """
        –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∏—â–µ—Ç –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
        
        Args:
            page: –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Playwright
            
        Returns:
            str: –°–µ–ª–µ–∫—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        button = self._find_show_more_button(page)
        if button:
            return button
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∏ –∏—â–µ–º
        logger.info("–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏...")
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page.evaluate("window.scrollTo(0, document.body.scrollHeight - 1000)")
        
        return self._find_show_more_button(page)
    
    def _highlight_all_buttons(self, page):
        """
        –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        Args:
            page: –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Playwright
        """
        logger.info("–ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏...")
        page.evaluate("""
            () => {
                const buttons = document.querySelectorAll('button');
                buttons.forEach(button => {
                    button.style.border = '3px solid red';
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    const text = button.textContent;
                    button.setAttribute('data-debug', text.trim());
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫ –ø–æ –≤—Å–µ–º –∫–Ω–æ–ø–∫–∞–º
                    button.onclick = function() {
                        console.log('Clicked button:', this.textContent);
                    }
                });
            }
        """)
        screenshot_path = os.path.join(self.output_dir, "highlighted_buttons.png")
        page.screenshot(path=screenshot_path)