import re
import logging
from playwright.sync_api import Page

logger = logging.getLogger("StealthyParser")

def extract_property_links(page: Page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    logger.info("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...")
    
    # –°–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã, –≤–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    selectors = [
        'a[href*="/msk/choose/"]',  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ HTML
        'div.bg-white.relative > a',  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        '.bg-white a'  # –ë–æ–ª–µ–µ –æ–±—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    ]
    
    all_links = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    for selector in selectors:
        elements = page.query_selector_all(selector)
        logger.info(f"–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –Ω–∞—à–µ–ª {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        for element in elements:
            href = element.get_attribute('href')
            if href:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
                full_url = 'https://etalongroup.ru' + href if href.startswith('/') else href
                all_links.add(full_url)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_links)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã")
    
    return list(all_links)

def extract_apartment_details(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    
    apartment_data = {}
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
    title = page.query_selector("h4.th-h3.text-charcoal")
    if title:
        title_text = title.inner_text()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ –ø–ª–æ—â–∞–¥—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        apartment_data["title"] = title_text
        room_match = re.search(r'(\d+)-–∫–æ–º–Ω', title_text)
        apartment_data["rooms"] = room_match.group(1) if room_match else None
        
        number_match = re.search(r'‚Ññ(\d+)', title_text)
        apartment_data["number"] = number_match.group(1) if number_match else None
        
        area_match = re.search(r'(\d+(?:,\d+)?)\s*–º¬≤', title_text)
        apartment_data["area"] = area_match.group(1).replace(',', '.') if area_match else None
    
    # –¶–µ–Ω–∞
    price_elem = page.query_selector("p.th-h3.text-scarlet")
    if price_elem:
        price_text = price_elem.inner_text()
        clean_price = re.sub(r'[^\d]', '', price_text)
        apartment_data["price"] = clean_price
    
    # –¶–µ–Ω–∞ –∑–∞ –º¬≤
    price_per_meter_elem = page.query_selector("div.th-b1-regular.text-cruella")
    if price_per_meter_elem:
        price_per_meter_text = price_per_meter_elem.inner_text()
        clean_price_per_meter = re.sub(r'[^\d]', '', price_per_meter_text)
        apartment_data["price_per_meter"] = clean_price_per_meter
    
    # –°—Ä–æ–∫ —Å–¥–∞—á–∏
    completion_date_elem = page.query_selector("div.u-badge__content span.th-b1-regular")
    if completion_date_elem:
        apartment_data["completion_date"] = completion_date_elem.inner_text().strip()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ, –º–µ—Ç—Ä–æ –∏ –∞–¥—Ä–µ—Å–µ
    project_details = {}
    info_rows = page.query_selector_all("section.flex.flex-col.gap-2.pb-4 > div")
    
    for row in info_rows:
        # –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
        key_elem = row.query_selector("p:first-child")
        value_elem = row.query_selector("p:last-child")
        
        if key_elem and value_elem:
            key = key_elem.inner_text().strip()
            
            # –î–ª—è –ø–æ–ª—è "–ü—Ä–æ–µ–∫—Ç" –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ span
            if key == "–ü—Ä–æ–µ–∫—Ç":
                project_span = row.query_selector("span.th-b1-bold")
                value = project_span.inner_text().strip() if project_span else value_elem.inner_text().strip()
            else:
                value = value_elem.inner_text().strip()
            
            project_details[key] = value
    
    apartment_data["details"] = project_details
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–º–Ω–∞—Ç (–Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∫–æ–º–Ω–∞—Ç")
    show_room_sizes_button = page.query_selector("div.flex.flex-row.items-center.gap-1.th-b1-bold.text-charcoal.cursor-pointer")
    if show_room_sizes_button:
        show_room_sizes_button.click()
        # –ñ–¥–µ–º, –ø–æ–∫–∞ —Ä–∞—Å–∫—Ä–æ–µ—Ç—Å—è —Å–µ–∫—Ü–∏—è —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
        page.wait_for_timeout(500)
        
        room_sizes = {}
        size_rows = page.query_selector_all("section.overflow-hidden div.flex.flex-row")
        
        for row in size_rows:
            room_name_elem = row.query_selector("p:first-child")
            room_size_elem = row.query_selector("p.flex-grow.text-right")
            
            if room_name_elem and room_size_elem:
                room_name = room_name_elem.inner_text().strip()
                room_size_text = room_size_elem.inner_text().strip()
                size_match = re.search(r'(\d+(?:[.,]\d+)?)\s*–º¬≤', room_size_text)
                room_size = size_match.group(1).replace(',', '.') if size_match else room_size_text
                room_sizes[room_name] = room_size
        
        apartment_data["room_sizes"] = room_sizes
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
    presentation_link = page.query_selector('a[href*="pdfflat"]')
    if presentation_link:
        apartment_data["presentation_url"] = presentation_link.get_attribute("href")
    
    return apartment_data