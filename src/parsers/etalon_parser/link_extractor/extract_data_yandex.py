from playwright.sync_api import sync_playwright, Page
import time
import json
import os
import logging
import sys
import random
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
class ColoredFormatter(logging.Formatter):
    COLORS = {
        'INFO': '\033[92m',  # –∑–µ–ª–µ–Ω—ã–π
        'WARNING': '\033[93m',  # –∂–µ–ª—Ç—ã–π
        'ERROR': '\033[91m',  # –∫—Ä–∞—Å–Ω—ã–π
        'DEBUG': '\033[94m',  # —Å–∏–Ω–∏–π
        'RESET': '\033[0m'  # —Å–±—Ä–æ—Å —Ü–≤–µ—Ç–∞
    }
    
    def format(self, record):
        log_message = super().format(record)
        return f"{self.COLORS.get(record.levelname, self.COLORS['RESET'])}{log_message}{self.COLORS['RESET']}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("StealthyParser")
logger.setLevel(logging.INFO)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler("extraction.log")
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–∞–º–∏
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(ColoredFormatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(console_handler)

def print_progress_bar(iteration, total, prefix='', suffix='', length=50, fill='‚ñà'):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –∫–æ–Ω—Å–æ–ª–∏"""
    percent = f"{100 * (iteration / float(total)):.1f}"
    filled_length = int(length * iteration // total)
    bar = fill * filled_length + '-' * (length - filled_length)
    sys.stdout.write(f'\r{prefix} |{bar}| {percent}% {suffix}')
    sys.stdout.flush()
    if iteration == total: 
        sys.stdout.write('\n')

def simulate_human_behavior(page):
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("üß† –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è...")
    
    # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
    for _ in range(random.randint(3, 7)):
        x = random.randint(100, 1500)
        y = random.randint(100, 700)
        page.mouse.move(x, y, steps=random.randint(5, 10))  # –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
        time.sleep(random.uniform(0.3, 1.5))
    
    # –°–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
    scroll_amount = random.randint(300, 700)
    logger.debug(f"–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –Ω–∞ {scroll_amount}px")
    page.mouse.wheel(0, scroll_amount)
    time.sleep(random.uniform(1.0, 2.5))
    
    # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 40% –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤–≤–µ—Ä—Ö, –∫–∞–∫ –±—É–¥—Ç–æ —á—Ç–æ-—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ
    if random.random() < 0.4:
        back_scroll = random.randint(100, 300)
        logger.debug(f"–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö –Ω–∞ {back_scroll}px")
        page.mouse.wheel(0, -back_scroll)
        time.sleep(random.uniform(0.7, 1.8))
    
    # –ò–Ω–æ–≥–¥–∞ –≤—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç (—Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 20%)
    if random.random() < 0.2:
        text_elements = page.query_selector_all("p, h1, h2, h3, span, a")
        if text_elements:
            element = random.choice(text_elements)
            try:
                element.click(click_count=random.choice([1, 3]))  # –û–¥–∏–Ω–æ—á–Ω—ã–π –∏–ª–∏ —Ç—Ä–æ–π–Ω–æ–π –∫–ª–∏–∫
                time.sleep(random.uniform(0.5, 1.2))
                page.keyboard.press("Escape")  # –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ
    
    # –ò–Ω–æ–≥–¥–∞ "–¥—É–º–∞–µ–º" –¥–æ–ª—å—à–µ (—Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30%)
    if random.random() < 0.3:
        thinking_time = random.uniform(2.0, 4.0)
        logger.debug(f"–ü–∞—É–∑–∞ –Ω–∞ {thinking_time:.1f} —Å–µ–∫—É–Ω–¥")
        time.sleep(thinking_time)
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –∏–∑—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    page.mouse.wheel(0, random.randint(100, 400))
    time.sleep(random.uniform(0.5, 1.5))

def random_delay(min_seconds=1, max_seconds=5):
    """–°–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    delay = random.uniform(min_seconds, max_seconds)
    time.sleep(delay)
    return delay

def load_cookies(context):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç cookies –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    cookies_file = 'etalon_cookies.json'
    if os.path.exists(cookies_file):
        try:
            with open(cookies_file, 'r') as f:
                cookies = json.load(f)
                context.add_cookies(cookies)
                logger.info(f"üç™ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cookies)} cookies –∏–∑ —Ñ–∞–π–ª–∞")
                return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ cookies: {e}")
    return False

def save_cookies(context):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç cookies –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    cookies = context.cookies()
    with open('etalon_cookies.json', 'w', encoding='utf-8') as f:
        json.dump(cookies, f, ensure_ascii=False)
    logger.info(f"üç™ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(cookies)} cookies –≤ —Ñ–∞–π–ª")

def check_and_solve_captcha(page):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ CAPTCHA –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–µ—à–∏—Ç—å –µ—ë"""
    captcha_selectors = [
        'iframe[src*="recaptcha"]',
        'iframe[src*="captcha"]',
        'div.g-recaptcha',
        'div[class*="captcha"]',
        'img[src*="captcha"]'
    ]
    
    for selector in captcha_selectors:
        if page.is_visible(selector):
            logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ CAPTCHA: {selector}")
            page.screenshot(path="captcha_detected.png")
            input("CAPTCHA –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! –†–µ—à–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return True
    
    return False

def extract_property_links(page: Page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    logger.info("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...")
    
    # –°–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã, –≤–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    selectors = [
        'a[href*="/msk/choose/"]',  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ HTML
        'div.bg-white.relative > a',  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        '.bg-white a'  # –ë–æ–ª–µ–µ –æ–±—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    ]
    
    all_links = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    for selector in selectors:
        elements = page.query_selector_all(selector)
        logger.info(f"–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –Ω–∞—à–µ–ª {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        for element in elements:
            href = element.get_attribute('href')
            if href:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
                full_url = 'https://etalongroup.ru' + href if href.startswith('/') else href
                all_links.add(full_url)
    
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_links)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã")
    
    return list(all_links)


def wait_page(results_page):
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏:
    try:
        # –ñ–¥–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã (DOMContentLoaded –∏ load events)
        results_page.wait_for_load_state("load", timeout=30000)
        logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –î–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JavaScript-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
        random_delay(3, 5)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        # –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        try:
            results_page.wait_for_selector('a[href*="/msk/object/"]', timeout=10000)
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        
        logger.info(f"‚úÖ –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {results_page.url}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try:
            results_page.screenshot(path="page_load_warning.png")
        except:
            pass
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π")

def extract_data_with_yandex():
    logger.info("=" * 60)
    logger.info(f"ü•∑ –ù–ê–ß–ê–õ–û –°–ö–†–´–¢–û–ì–û –ü–ê–†–°–ò–ù–ì–ê: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ User-Agent –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
    user_agents = [
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.2 Safari/605.1.15",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:122.0) Gecko/20100101 Firefox/122.0"
    ]
    
    # –°–ª—É—á–∞–π–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
    viewports = [
        {"width": 1920, "height": 1080},
        {"width": 1440, "height": 900},
        {"width": 1366, "height": 768}
    ]
    
    # –Ø–≤–Ω—ã–π –ø—É—Ç—å –∫ Yandex Browser –Ω–∞ macOS
    yandex_path = "/Applications/Yandex.app/Contents/MacOS/Yandex"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
    if not os.path.exists(yandex_path):
        logger.warning(f"Yandex Browser –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {yandex_path}")
        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏...")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –∫ Yandex Browser
        alternative_paths = [
            "/Applications/Yandex Browser.app/Contents/MacOS/Yandex Browser",
            os.path.expanduser("~/Applications/Yandex.app/Contents/MacOS/Yandex"),
            os.path.expanduser("~/Applications/Yandex Browser.app/Contents/MacOS/Yandex Browser")
        ]
        
        for path in alternative_paths:
            if os.path.exists(path):
                yandex_path = path
                logger.info(f"–ù–∞–π–¥–µ–Ω Yandex Browser: {yandex_path}")
                break
        else:
            logger.error("Yandex Browser –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–µ—Å—Ç")
            custom_path = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Yandex Browser: ")
            if os.path.exists(custom_path):
                yandex_path = custom_path
            else:
                logger.error(f"–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {custom_path}")
                return
    
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º Yandex Browser: {yandex_path}")
    
    with sync_playwright() as p:
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π User-Agent
            selected_user_agent = random.choice(user_agents)
            selected_viewport = random.choice(viewports)
            
            logger.info(f"üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ–º User-Agent: {selected_user_agent}")
            logger.info(f"üìê –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {selected_viewport['width']}x{selected_viewport['height']}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ—Ç–∏–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
            browser = p.chromium.launch(
                headless=False,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                executable_path=yandex_path,
                args=[
                    "--no-sandbox",
                    "--disable-dev-shm-usage",
                    "--disable-blink-features=AutomationControlled",  # –°–∫—Ä—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
                    "--disable-extensions"
                ]
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            context = browser.new_context(
                user_agent=selected_user_agent,
                viewport=selected_viewport,
                locale=random.choice(["ru-RU", "en-US"]),
                timezone_id="Europe/Moscow"
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies –µ—Å–ª–∏ –µ—Å—Ç—å
            has_cookies = load_cookies(context)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page = context.new_page()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            page.add_init_script("""
                // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ navigator –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                Object.defineProperty(navigator, 'webdriver', {
                    get: () => false,
                });
                
                // –°–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                if (window.navigator.plugins) {
                    Object.defineProperty(navigator, 'plugins', {
                        get: () => [1, 2, 3, 4, 5],
                    });
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ —è–∑—ã–∫–∏
                Object.defineProperty(navigator, 'languages', {
                    get: () => ['ru-RU', 'ru', 'en-US', 'en'],
                });
                
                // –°–∫—Ä—ã–≤–∞–µ–º Chrome
                window.chrome = {
                    runtime: {},
                };
            """)
            
            logger.info("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç etalongroup.ru/msk/...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å–∞–π—Ç–∞
            start_delay = random_delay(1, 3)
            logger.debug(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å–∞–π—Ç–∞: {start_delay:.2f}—Å")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page.goto("https://etalongroup.ru/choose/", timeout=60000)
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            random_delay(3, 6)
            simulate_human_behavior(page)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CAPTCHA
            if check_and_solve_captcha(page):
                logger.info("CAPTCHA —Ä–µ—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            with open("initial_page.html", "w", encoding="utf-8") as f:
                f.write(page.content())
            save_cookies(context)
            

            logger.info("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ'...")
            
            counter = 0
            max_clicks = 30
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            def find_show_more_button():
                # 1. –ò—â–µ–º –ø–æ —Ç–æ—á–Ω–æ–º—É –∫–ª–∞—Å—Å—É (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ HTML)
                exact_selector = 'button.u-btn.u-btn--variant-flat.u-btn--density-default.u-btn--width-content.th-b1-medium:has-text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ")'
                if page.is_visible(exact_selector):
                    return exact_selector
                
                # 2. –ò—â–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ç–µ–∫—Å—Ç–∞
                text_selector = 'button:has-text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ")'
                if page.is_visible(text_selector):
                    return text_selector
                
                # 3. –ò—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º –∫–ª–∞—Å—Å–∞–º
                class_selector = 'button.u-btn--width-content:has-text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ")'
                if page.is_visible(class_selector):
                    return class_selector
                
                # 4. –ò—â–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É span
                span_selector = 'button .u-btn__content:has-text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ")'
                if page.query_selector(span_selector):
                    button = page.query_selector(span_selector).evaluate('node => node.closest("button")')
                    if button:
                        return span_selector
                
                # 5. –ò—â–µ–º –ø–æ XPath
                xpath_selector = "//button[.//span[contains(text(), '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ')]]"
                if page.is_visible(f"xpath={xpath_selector}"):
                    return f"xpath={xpath_selector}"
                
                # 6. –ò—â–µ–º –±–æ–ª–µ–µ –æ–±—â–∏–º —Å–ø–æ—Å–æ–±–æ–º
                general_xpath = "//button[contains(., '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ')]"
                if page.is_visible(f"xpath={general_xpath}"):
                    return f"xpath={general_xpath}"
                
                return None
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∏ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏
            def scroll_and_find_button():
                # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                button = find_show_more_button()
                if button:
                    return button
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∏ –∏—â–µ–º
                logger.info("–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏...")
                
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
                page.wait_for_timeout(1000)

                page.screenshot(path="first_scroll.png")
                
                # –ò—â–µ–º —Å–Ω–æ–≤–∞
                button = find_show_more_button()
                if button:
                    return button
                
                # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –≤–≤–µ—Ä—Ö
                # (–∫–Ω–æ–ø–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫—Ä—ã—Ç–∞ –ø–æ–¥ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏)
                page.evaluate("window.scrollBy(0, -1000)")
                page.wait_for_timeout(500)

                page.screenshot(path="second_scroll.png")
                
                return find_show_more_button()
            
            # –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ - –≤—ã–¥–µ–ª–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            def highlight_all_buttons():
                logger.info("–ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏...")
                page.evaluate("""
                    () => {
                        const buttons = document.querySelectorAll('button');
                        buttons.forEach(button => {
                            button.style.border = '3px solid red';
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            const text = button.textContent;
                            button.setAttribute('data-debug', text.trim());
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫ –ø–æ –≤—Å–µ–º –∫–Ω–æ–ø–∫–∞–º
                            button.onclick = function() {
                                console.log('Clicked button:', this.textContent);
                            }
                        });
                    }
                """)
                page.screenshot(path="highlighted_buttons.png")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
            while counter < max_clicks:
                # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É
                if counter == 0:
                    highlight_all_buttons()
                
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
                button_selector = scroll_and_find_button()
                
                if button_selector:
                    logger.info(f"üëÜ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ' ({counter + 1}/{max_clicks}) —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {button_selector}")
                    
                    try:
                        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º
                        page.screenshot(path=f"before_click_{counter+1}.png")
                        
                        # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É
                        if button_selector.startswith("xpath="):
                            # –ï—Å–ª–∏ XPath, –∏—Å–ø–æ–ª—å–∑—É–µ–º evaluate –¥–ª—è –∫–ª–∏–∫–∞
                            page.evaluate(f"""
                                () => {{
                                    const button = document.evaluate(
                                        "{button_selector.replace('xpath=', '')}", 
                                        document, 
                                        null, 
                                        XPathResult.FIRST_ORDERED_NODE_TYPE
                                    ).singleNodeValue;
                                    if (button) button.click();
                                }}
                            """)
                        else:
                            # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∫–ª–∏–∫–∞
                            page.click(button_selector)
                        
                        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        page.wait_for_timeout(3000)
                        
                        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
                        page.screenshot(path=f"after_click_{counter+1}.png")
                        
                        counter += 1
                        print_progress_bar(counter, max_clicks, prefix='–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤:', suffix='–ó–∞–≥—Ä—É–∂–µ–Ω–æ', length=40)
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏: {e}")
                        
                        # –ü—Ä–æ–±—É–µ–º JavaScript-–∫–ª–∏–∫ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                        logger.info("–ü—Ä–æ–±—É–µ–º JavaScript-–∫–ª–∏–∫...")
                        try:
                            if button_selector.startswith("xpath="):
                                xpath = button_selector.replace("xpath=", "")
                                page.evaluate(f"""
                                    () => {{
                                        const button = document.evaluate(
                                            "{xpath}", 
                                            document, 
                                            null, 
                                            XPathResult.FIRST_ORDERED_NODE_TYPE
                                        ).singleNodeValue;
                                        if (button) button.click();
                                    }}
                                """)
                            else:
                                page.evaluate(f"""
                                    () => {{
                                        const button = document.querySelector('{button_selector}');
                                        if (button) button.click();
                                    }}
                                """)
                            page.wait_for_timeout(3000)
                            counter += 1
                        except Exception as js_e:
                            logger.error(f"JavaScript-–∫–ª–∏–∫ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {js_e}")
                            
                            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–∂–∞—Ç—å, –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
                            page.screenshot(path=f"click_error_{counter+1}.png")
                            
                            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–µ–º–Ω–æ–≥–æ –≤–Ω–∏–∑
                            page.evaluate("window.scrollBy(0, 300)")
                            page.wait_for_timeout(1000)
                else:
                    # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                    logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    page.screenshot(path="no_more_button.png")
                    break
            
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π HTML
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ –≤—Å–µ–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏")
            html_content = page.content()
            with open("final_page.html", "w", encoding="utf-8") as f:
                f.write(html_content)
            
            logger.info("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...")
            
            links = extract_property_links(page)
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(links)} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
            with open("extracted_links.json", "w", encoding="utf-8") as f:
                json.dump(links, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üíæ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(links)} –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª extracted_links.json")
        
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info("=" * 60)
            logger.info(f"‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            logger.info("=" * 60)
            
            # –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
            logger.info("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä...")
            input()
            browser.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}", exc_info=True)
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            try:
                if 'page' in locals() and page:
                    page.screenshot(path="error_screenshot.png")
                    logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏")
            except:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏")

if __name__ == "__main__":
    extract_data_with_yandex()